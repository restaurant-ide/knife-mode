;; knife-mode.el
;; Copyright Bryan W. Berry (<bryan.berry@gmail.com>), 2012
;; Apache 2.0 license
;;

;;; test-kitchen.el --- Run knife inside of emacs

;; Copyright (C) 2015 JJ Asghar <http://jjasghar.github.io>
;; Author: JJ Asghar
;; URL: http://github.com/jjasghar/knife-el
;; Created: 2015
;; Version: 0.2.1
;; Keywords: chef ruby knife

;; This file is NOT part of GNU Emacs.
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; See <http://www.gnu.org/licenses/> for a copy of the GNU General
;; Public License.

;;; Commentary:

;; This minor mode also assumes you have [[https://downloads.chef.io/chef-dk/][ChefDK]] installed.
;;
;; I'd like to thank [[https://twitter.com/camdez][Cameron Desautels]] for the jump start on this project. /me tips my hat to you sir.
;;
;; I'd also like to thank [[http://twitter.com/ionrock][Eric Larson]] for pushing me to keep this alive.
;;
;; This minor mode allows you to run knife in a seporate buffer
;;
;;  * Run knife destroy in another buffer
;;  * Run knife list in another buffer
;;  * Run knife test in another buffer
;;  * Run knife verify in another buffer
;;
;; You'll probably want to define some key bindings to run these.
;;
;;   (global-set-key (kbd "C-c C-d") 'knife-destroy)
;;   (global-set-key (kbd "C-c C-t") 'knife-test)
;;   (global-set-key (kbd "C-c l") 'knife-list)
;;   (global-set-key (kbd "C-c C-v") 'knife-verify)

;; TODO:
;;
;; 1) Have a way to select the only one suite to run
;; 2) Have a way to select only one os to run

;;; Code:

(defcustom knife-command "knife"
  "The command launch kitchen.")

(defcustom knife-command t
  knife-local-mode)

(defconst knife-config-file (locate-user-emacs-file ".knife-autogenerated.rb"))

(defconst knife-anchor-files '("metadata.rb" "metadata.json" "Berksfile"))

(defun knife-locate-root-dir ()
  "Return the full path of the directory where .kitchen.yml file was found, else nil."
  (cl-labels ((locate-dir (list-anchor-files)
                          (let ((buffer-file-dir (when buffer-file-name (file-name-as-directory (file-name-directory buffer-file-name)))))
                            (when buffer-file-dir
                              (cond ((null list-anchor-files) nil)
                                    ((locate-dominating-file buffer-file-dir (car list-anchor-files))
                                     (locate-dominating-file buffer-file-dir (car list-anchor-files)))
                                    (t (locate-dir (cdr list-anchor-files))
                                       ))))))
    (locate-dir knife-anchor-files)))

;;; knife is very likes colors, so colorize compilation buffer
(require 'ansi-color)

(defun knife-colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region compilation-filter-start (point))
  (toggle-read-only))

;; define knife compilation mode
(define-compilation-mode knife-compilation-mode "Knife compilation"
  "Compilation mode for RSpec output."
  (add-hook 'compilation-filter-hook 'knife-colorize-compilation-buffer nil t))

(defun knife-run (cmd)
  (let ((root-dir (knife-locate-root-dir))
        (local-mode (when knife-local-mode "-z")))
    (if root-dir
        (let ((default-directory root-dir))
          (compile (concat knife-command " " cmd local-mode) 'knife-compilation-mode))
      (error "You are not inside cookbook!"))))

;;;###autoload
(defun knife-cookbook-list ()
  "Run chef exec kitchen destroy in a different buffer."
  (interactive)
  (knife-run "cookbook list"))

(defun knife-cookbook-test ()
  (interactive)
  (knife-run "cookbook test")) ;; [COOKBOOKS...] (options)

(defun knife-cookbook-list ()
  (interactive)
  (knife-run "cookbook list -z")) ;; [COOKBOOKS...] (options)

;; Available subcommands: (for details, knife SUB-COMMAND --help)

;; ** BOOTSTRAP COMMANDS **
;; knife bootstrap FQDN (options)

;; ** CLIENT COMMANDS **
;; knife client bulk delete REGEX (options)
;; knife client create CLIENT (options)
;; knife client delete CLIENT (options)
;; knife client edit CLIENT (options)
;; knife client list (options)
;; knife client reregister CLIENT (options)
;; knife client show CLIENT (options)

;; ** CONFIGURE COMMANDS **
;; knife configure (options)
;; knife configure client DIRECTORY

;; ** COOKBOOK COMMANDS **
;; knife cookbook bulk delete REGEX (options)
;; knife cookbook create COOKBOOK (options)
;; knife cookbook delete COOKBOOK VERSION (options)
;; knife cookbook download COOKBOOK [VERSION] (options)
;; knife cookbook list (options)
;; knife cookbook metadata COOKBOOK (options)
;; knife cookbook metadata from FILE (options)
;; knife cookbook show COOKBOOK [VERSION] [PART] [FILENAME] (options)
;; knife cookbook test [COOKBOOKS...] (options)
;; knife cookbook upload [COOKBOOKS...] (options)

;; ** COOKBOOK SITE COMMANDS **
;; knife cookbook site download COOKBOOK [VERSION] (options)
;; knife cookbook site install COOKBOOK [VERSION] (options)
;; knife cookbook site list (options)
;; knife cookbook site search QUERY (options)
;; knife cookbook site share COOKBOOK CATEGORY (options)
;; knife cookbook site show COOKBOOK [VERSION] (options)
;; knife cookbook site unshare COOKBOOK

;; ** DATA BAG COMMANDS **
;; knife data bag create BAG [ITEM] (options)
;; knife data bag delete BAG [ITEM] (options)
;; knife data bag edit BAG ITEM (options)
;; knife data bag from file BAG FILE|FOLDER [FILE|FOLDER..] (options)
;; knife data bag list (options)
;; knife data bag show BAG [ITEM] (options)

;; ** ENVIRONMENT COMMANDS **
;; knife environment compare [ENVIRONMENT..] (options)
;; knife environment create ENVIRONMENT (options)
;; knife environment delete ENVIRONMENT (options)
;; knife environment edit ENVIRONMENT (options)
;; knife environment from file FILE [FILE..] (options)
;; knife environment list (options)
;; knife environment show ENVIRONMENT (options)

;; ** EXEC COMMANDS **
;; knife exec [SCRIPT] (options)

;; ** HELP COMMANDS **
;; knife help [list|TOPIC]

;; ** INDEX COMMANDS **
;; knife index rebuild (options)

;; ** KNIFE COMMANDS **
;; Usage: /usr/bin/knife (options)

;; ** NODE COMMANDS **
;; knife node bulk delete REGEX (options)
;; knife node create NODE (options)
;; knife node delete NODE (options)
;; knife node edit NODE (options)
;; knife node environment set NODE ENVIRONMENT
;; knife node from file FILE (options)
;; knife node list (options)
;; knife node run_list add [NODE] [ENTRY[,ENTRY]] (options)
;; knife node run_list remove [NODE] [ENTRIES] (options)
;; knife node run_list set NODE ENTRIES (options)
;; knife node show NODE (options)

;; ** PATH-BASED COMMANDS **
;; knife delete [PATTERN1 ... PATTERNn]
;; knife deps PATTERN1 [PATTERNn]
;; knife diff PATTERNS
;; knife download PATTERNS
;; knife edit [PATTERN1 ... PATTERNn]
;; knife list [-dfR1p] [PATTERN1 ... PATTERNn]
;; knife show [PATTERN1 ... PATTERNn]
;; knife upload PATTERNS
;; knife xargs [COMMAND]

;; ** RAW COMMANDS **
;; knife raw REQUEST_PATH

;; ** RECIPE COMMANDS **
;; knife recipe list [PATTERN]

;; ** ROLE COMMANDS **
;; knife role bulk delete REGEX (options)
;; knife role create ROLE (options)
;; knife role delete ROLE (options)
;; knife role edit ROLE (options)
;; knife role from file FILE [FILE..] (options)
;; knife role list (options)
;; knife role show ROLE (options)

;; ** SEARCH COMMANDS **
;; knife search INDEX QUERY (options)

;; ** SERVE COMMANDS **
;; Usage: /usr/bin/knife (options)

;; ** SSH COMMANDS **
;; knife ssh QUERY COMMAND (options)

;; ** SSL COMMANDS **
;; knife ssl check [URL] (options)
;; knife ssl fetch [URL] (options)

;; ** STATUS COMMANDS **
;; knife status QUERY (options)

;; ** TAG COMMANDS **
;; knife tag create NODE TAG ...
;; knife tag delete NODE TAG ...
;; knife tag list NODE

;; ** USER COMMANDS **
;; knife user create USER (options)
;; knife user delete USER (options)
;; knife user edit USER (options)
;; knife user list (options)
;; knife user reregister USER (options)
;; knife user show USER (options)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; knife-mode.el
;; Copyright Bryan W. Berry (<bryan.berry@gmail.com>), 2012
;; Apache 2.0 license
;;

;; (defun get-item-after (myitem myitems)
;;   "gets item after myitem"
;;   (cadr (member myitem myitems)))

;; (defun process-cmd (cmd)
;;   (defun process-exitcode (code) (if (= code 0)
;;                                   (message "command completed successfully")
;;                                 (message (format "command unsuccessfully with exitcode %s" code))
;;                                 ))
;;   (process-exitcode (shell-command cmd))
;;   )

;; (defun get-cookbook-path ()
;;   (setq cookbook-path (split-string (buffer-file-name) "/" t))
;;   (setq cookbook-index
;;         (+ 1 (position
;;               (or (get-item-after "cookbooks" cookbook-path)
;;                   (get-item-after "site-cookbooks" cookbook-path)) ;; we could use berkshelf
;;                   cookbook-path)
;;            ))
;;   (concat "/"
;;           (mapconcat 'identity
;;                      (subseq cookbook-path 0 cookbook-index)
;;                      "/"))
;;   )

;; (defun knife-cookbook-test ()
;;   "runs knife cookbook test on the current cookbook"
;;   (interactive)
;;   (save-some-buffers t)
;;   (setq cookbook-path (get-cookbook-path))
;;   (shell-command (format "knife cookbook test %s &" cookbook-path))
;;   )

;; (defun knife-cookbook-foodcritic ()
;;   "runs knife cookbook test on the current cookbook"
;;   (interactive)
;;   (save-some-buffers t)
;;   (message (format "foodcritic %s &" (get-cookbook-path)))
;;   (shell-command
;;    (format "foodcritic %s &" (get-cookbook-path))))



;; (defun knife-load-cookbook (cookbook-path)
;;   (setq cookbook-name (get-item-after "cookbooks" cookbook-path))
;;   (process-cmd (format "knife cookbook upload %s" cookbook-name))
;;   )

;; (defun knife-load-role ()
;;   (process-cmd
;;    (format "knife role from file %s" (buffer-file-name)
;;            )))

;; (defun knife-load-environment ()
;;   (process-cmd
;;    (format "knife environment from file %s" (buffer-file-name)
;;            )))

;; (defun knife-load-data-bag ()
;;   (setq data-bag-path-list (split-string (buffer-file-name) "/" t))
;;   (setq bag-name (get-item-after "data_bags" data-bag-path-list))
;;   (setq bag-item (car (last data-bag-path-list)))
;;   (message (format "knife data bag from file %s %s" bag-name bag-item))
;;   (process-cmd (format "knife data bag from file %s %s" bag-name bag-item)))

;; (defun knife-from-file ()
;;   "Load a cookbook, environment, role, or databag from file.
;;    All open buffers are saved, then this command parses the filename
;;    for the current buffer."
;;   (interactive)
;;   (save-some-buffers t)
;;   (setq knife-types '("data_bags" "cookbooks" "environments" "roles"))
;;   (setq knife-path-list (split-string (buffer-file-name) "/" t))
;;   ;;(setq knife-path-list '("home" "hitman" "chef-repo" "roles" "environment.rb"))
;;   ;;(setq knife-path-list '("home" "hitman" "chef-repo" "cookbooks" "java" "recipes" "default.rb"))
;;   (setq knife-type
;;         (find-if
;;          (lambda (x)
;;            (member x knife-path-list))
;;          knife-types))
;;   (cond
;;    ((equal knife-type "cookbooks")(knife-load-cookbook knife-path-list))
;;    ((equal knife-type "roles")(knife-load-role))
;;    ((equal knife-type "environments")(knife-load-environment))
;;    ((equal knife-type "data_bags")(knife-load-data-bag))
;;    )
;;   )
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(provide 'knife)
